###
###   Template built from AWS CloudFormation documentation
###   Author: Jesús Acuña
###   ATU Student: L00196546
###

AWSTemplateFormatVersion: "2010-09-09"
Version: 1
Description: >
  Improving AWS infrastructure: Multi-AZ env with private/public subnets, NAT Gateway, Auto Scaling Group, Load Balancer, and security enhancements.
  Scalability, Reliability, and Maintainability.

Mappings: # Mapping of AMIs per region for flexibility
  RegionMap:
    eu-west-1:
      AMI: ami-052064a798f08f0d3
    us-east-1:
      AMI: ami-000cd1b17e4e62251

# ------------------------------
# RESOURCES SECTION
# ------------------------------

Resources:
  # Create a Virtual Private Cloud (VPC) with a CIDR block
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true # Enables DNS for hostnames
      EnableDnsSupport: true # Enables DNS resolution
      Tags:
        - Key: Name
          Value: MyVPC

  ### Create subnets to be deployed in a different availability zone
  # Create a public subnet1
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      # Assigning the availability zone
      AvailabilityZone: !Select [0, !GetAZs ""] # First AZ
      MapPublicIpOnLaunch: true # Auto-assign public IPS
      Tags:
        - Key: Name
          Value: MySubnet1

  # Create a public subnet2
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      # Assigning the availability zone
      AvailabilityZone: !Select [1, !GetAZs ""] # Second AZ
      MapPublicIpOnLaunch: true # Auto-assign public IPS
      Tags:
        - Key: Name
          Value: MySubnet2

  # Create a private subnet for auto-scaling
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false # No public IPs
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create an Internet Gateway to allow internet access
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Create a Route Table for the VPC
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: MyRouteTable

  # Add a default route to the Internet Gateway
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  ### Associate each subnet with the respective route table
  # Associate the subnet1 with the route table
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref MyRouteTable

  # Associate the subnet2 with the route table
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref MyRouteTable

  # Create an Elastic IP and NAT Gateway
  MyNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref MySubnet1
      AllocationId: !GetAtt MyNATGatewayEIP.AllocationId
      Tags:
        - Key: Name
          Value: MyNATGateway

  # Private route table for NATGateway
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Private route
  MyPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: MyNATGateway
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  # Private route table association
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateRouteTable

  # Create a Security Group to allow HTTP
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to client host (In/Out)
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MySecurityGroup

  ### Create EC2 instance to deploy in each availability zone using mapping and template
  # Launch template for reuse EC2
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref MySecurityGroup

  # Create auto scaling group
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: ScalableEC2Instances
          PropagateAtLaunch: true

  # Create low balancer
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref MySubnet1
        - !Ref MySubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: ApplicationLoadBalancer

  # Create target group for auto scaling group to elastic low balancer
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Tags:
        - Key: Name
          Value: MyTargetGroup

  # Listener from auto elastic low balancer to auto scaling group
  MyLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

# ------------------------------
# OUTPUTS SECTION
# ------------------------------

### Create each EC1 instance output
# Output the EC2 instance ID after deployment
# Instance1
Outputs:
  InstanceId1:
    Description: EC2 Instance ID in Subnet 1
    Value: !Ref MyEC2Instance1
  #Instance2
  InstanceId2:
    Description: EC2 Instance ID in Subnet 2
    Value: !Ref MyEC2Instance2
