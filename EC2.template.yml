AWSTemplateFormatVersion: "2010-09-09"
Version: 1.2
Description: >
  Improving AWS infrastructure: Multi-AZ env with private/public subnets, NAT Gateway, Auto Scaling Group, Load Balancer, and security enhancements.
  Scalability, Reliability, and Maintainability.
###
###   Template built from AWS CloudFormation documentation
###   Author: Jesús Acuña
###   ATU Student: L00196546
###

Resources:
  # Create a Virtual Private Cloud (VPC) with a CIDR block
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true # Enables DNS for hostnames
      EnableDnsSupport: true # Enables DNS resolution
      Tags:
        - Key: Name
          Value: MyVPC

  ### Create subnets to be deployed in a different availability zone
  # Create a public subnet1
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      # Assigning the availability zone
      AvailabilityZone: !Select [0, !GetAZs ""] # First AZ
      MapPublicIpOnLaunch: true # Auto-assign public IPS
      Tags:
        - Key: Name
          Value: MySubnet1

  # Create a public subnet2
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      # Assigning the availability zone
      AvailabilityZone: !Select [1, !GetAZs ""] # Second AZ
      MapPublicIpOnLaunch: true # Auto-assign public IPS
      Tags:
        - Key: Name
          Value: MySubnet2

  # Create an Internet Gateway to allow internet access
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Create a Route Table for the VPC
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: MyRouteTable

  # Add a default route to the Internet Gateway
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  ### Associate each subnet with the respective route table
  # Associate the subnet1 with the route table
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref MyRouteTable

  # Associate the subnet2 with the route table
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref MyRouteTable

  # Create a Security Group to allow SSH access
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host (In/Out)
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MySecurityGroup

  ### Create EC2 instance to deploy in each availability zone
  # Launch an EC2 instance in the subnet with the security group
  MyEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-052064a798f08f0d3
      SubnetId: !Ref MySubnet1
      SecurityGroupIds: [!Ref MySecurityGroup]
      Tags:
        - Key: Name
          Value: MyEC2Instance1

  # Launch an EC2 instance in the subnet with the security group
  MyEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-052064a798f08f0d3
      SubnetId: !Ref MySubnet2
      SecurityGroupIds: [!Ref MySecurityGroup]
      Tags:
        - Key: Name
          Value: MyEC2Instance2

### Create each EC1 instance output
# Output the EC2 instance ID after deployment
# Instance1
Outputs:
  InstanceId1:
    Description: EC2 Instance ID in Subnet 1
    Value: !Ref MyEC2Instance1
  #Instance2
  InstanceId2:
    Description: EC2 Instance ID in Subnet 2
    Value: !Ref MyEC2Instance2
